@page "/todo"
@rendermode InteractiveServer
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@using System.Text
@inject IJSRuntime JS

@code {
    private List<string> todoList = [];
    private string newEntryValue = string.Empty;
    private bool listChanged = false;

    private void AddToList()
    {
        if (string.IsNullOrWhiteSpace(newEntryValue)) return;

        todoList.Add(newEntryValue);
        newEntryValue = "";
        OnEntryChange();
        listChanged = true;
    }

    private void RemoveFromList(int index)
    {
        todoList.RemoveAt(index);
        listChanged = true;
    }

    private async void OnEntryChange()
    {
        await sessionStorage.SetItemAsync<string>("entry", newEntryValue);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var listData = await localStorage.GetItemAsync<List<string>>("todoList");
            if (listData != null && listData.Count() > 0)
            {
                todoList = listData;
            }

            newEntryValue = await sessionStorage.GetItemAsync<string>("entry") ?? "";

            StateHasChanged();
        }

        if (listChanged)
        {
            await localStorage.SetItemAsync("todoList", todoList);
            listChanged = false;
        }
    }

    private async Task DownloadToFile()
    {
        byte[] todoListBytes = Encoding.UTF8.GetBytes(string.Join(Environment.NewLine, todoList));

        await JS.InvokeVoidAsync(
            "downloadFileFromStream",
            "ToDo List.txt",
            new DotNetStreamReference(new MemoryStream(todoListBytes))
        );
    }
}
@* End code *@

<h3>Todo</h3>

<form @onsubmit="AddToList" class="entryInput">
    <input @bind="newEntryValue" @bind:after="OnEntryChange" placeholder="New entry" />
    <button type="submit" class="addButton">+</button>
</form>

@if (todoList.Count() == 0)
{
    <p>Empty list</p>
}
else
{
    <ul class="todoList">
        @for (int i = 0; i < todoList.Count(); i++)
        {
            var tIndex = i;
            <li>
                @todoList[i]
                <button @onclick="() => RemoveFromList(tIndex)" class="removeButton">-</button>
            </li>
        }
    </ul>

    <button @onclick="DownloadToFile">Download</button>
}